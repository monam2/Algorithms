import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Solution_4012 {
	static int T, n, map[][], min;
	static boolean isUsed[];
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st = null;
	static ArrayList<Integer> sums;
	static ArrayList<Integer> oneRes;

	public static void main(String[] args) throws IOException {
		T = Integer.parseInt(br.readLine());

		for (int t = 1; t < T+1; t++) {
			n = Integer.parseInt(br.readLine());
			map = new int[n][n];
			for (int i = 0; i < map.length; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < map.length; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			min = Integer.MAX_VALUE;
			//n개중 n/2개를 고르는 로직
			isUsed = new boolean[n];
			comb(0, 0);

			System.out.println("#" + t + " " + min);
		}//end for -> t
	}//end main


	//n개 중에서 n/2개를 고르기
	private static void comb(int start, int cnt) { //조합으로 풀어야 함
		if (cnt==n/2) {
			//식재료 절반 뽑고나서
			int sum1 = 0, sum2 = 0;
			for (int i = 0; i < n; i++) {
				for (int j = i+1; j < n; j++) {
					if(isUsed[i]&&isUsed[j]) {
						sum1 += map[i][j] + map[j][i];
					} else if (!isUsed[i] && !isUsed[j]) {
						sum2 += map[i][j] + map[j][i];
					}
				}
			}
			int gap = Math.abs(sum1 - sum2);
			min = Math.min(min, gap);
			return;
		}
		for (int i = start; i < n; i++) {
			if (isUsed[i]) continue;
			isUsed[i] = true;
			comb(i+1, cnt+1);
			isUsed[i] = false;
		}

//		calculateABS();
	}//end comb
}//end class
