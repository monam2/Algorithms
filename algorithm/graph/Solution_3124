import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Solution_3124 { //swea 3124 최소 스패닝 트리
	
	private static class Edge implements Comparable<Edge>{
		int from;
		int to;
		int weight;
		public Edge(int from, int to, int weight) {
			super();
			this.from = from;
			this.to = to;
			this.weight = weight;
		}
		@Override
		public int compareTo(Edge o) {
			// TODO Auto-generated method stub
			return Integer.compare(this.weight, o.weight);
		}
	}//end Edge
	
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st = null;
	static Edge[] edgeList;
	static int T, V, E, parents[];
	
	//statics
	
	public static void main(String[] args) throws IOException {
		T = Integer.parseInt(br.readLine());
		for (int t = 1; t <= T; t++) {
			st = new StringTokenizer(br.readLine());
			V = Integer.parseInt(st.nextToken());
			E = Integer.parseInt(st.nextToken());
			
			edgeList = new Edge[E];
			for (int e = 0; e < E; e++) {
				st = new StringTokenizer(br.readLine());
				int a = Integer.parseInt(st.nextToken());
				int b = Integer.parseInt(st.nextToken());
				int w = Integer.parseInt(st.nextToken());
				
				edgeList[e] = new Edge(a, b, w);
			}
			
			Arrays.sort(edgeList);
			
			//make-set
			make();
			
			//정렬된 간선을 하나씩 꺼내어 신장트리 생성
			long weight = 0; //가중치 누적
			int cnt = 0; //간선의 갯수 체크
 			
			for (Edge edge : edgeList) {
				//싸이클이 발생하면 다음으로 건너뜀
				if (!canUnion(edge.from, edge.to)) continue;
				weight+=edge.weight;
				if (++cnt==V-1) break;
			}
			
			System.out.println("#" + t + " " + weight);
			
		}//end for T
	}//end main
	
	private static void make() {
		parents = new int[V+1];
		for (int i = 1; i < V; i++) {
			parents[i] = i; //모든 정점을 자기 자신으로 하는 노드로 생성
		}
	}//end make
	
	//입력값 x의 조상을 리턴
	private static int find(int x) {
		if (parents[x] == x) return x;
		return parents[x] = find(parents[x]);
	}//end find
	
	//a의 조상과 b의 조상을 합집합하면 싸이클이 발생하는가?
	private static boolean canUnion(int a, int b) {
		if (find(a)==find(b)) return false;
		parents[find(b)] = find(a);
		return true;
	}
}//end class
